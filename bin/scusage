#!/usr/bin/env python3

import os
import i3ipc
import argparse
import tabulate

def run(args):
    i3 = i3ipc.Connection()

    counts = {}
    cachefile = os.path.expanduser(args.file)
    if cachefile and not os.path.exists(cachefile):
        os.makedirs(os.path.dirname(cachefile), mode=0o755, exist_ok=True)
    if args.resume and os.path.exists(cachefile):
        with open(cachefile) as f:
            counts = json.load(f)

    def on_binding(_, event):
        binding = event.binding
        sym = f"'{binding.input_code}'"
        if binding.symbol:
            sym = binding.symbol
        b = f"{'+'.join(binding.event_state_mask)}+{sym}: {binding.command}"
        counts[b] = counts.get(b, 0) + 1

    i3.on(i3ipc.Event.BINDING, on_binding)

    i3.main()

    if cachefile:
        with open(cachefile, "w") as f:
            f.write(json.dumps(count))
    print_result(counts)

def bar(amount, max):
    width = 30
    return "="*int((amount*width)/max)

def print_result(counts):
    data = []
    print("")
    total = sum(counts.values())
    max = None
    for k, v in sorted(counts.items(), key=lambda x: x[1], reverse=True):
        if not max:
            max = v
        data.append([k, f"{v} ({v/total*100:.0f}%)", bar(v, max)])
    print(tabulate.tabulate(data, headers=["shortcut", "count", ""]))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="monitor and report i3 keyboard shortcut usage")
    parser.add_argument("--file", "-f", type=str, help="file for reading and writing usage data. if not specified, no data will be written.", default=None)
    parser.add_argument("--resume", action="store_true", help="if provided, data is appended to <FILE>. otherwise, <FILE> is overwritten")
    run(parser.parse_args())
